name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCOUNT_KEY }}

      WEBAPP_NAME: webapp  # set this to your application's name
      API_PATH: 'API'      # set this to the path to your web app project, defaults to the repository root
      IAC_PATH: 'Infrastructure'
      IAC_LOCATION: 'Brazil South'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3      

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: '${{ env.IAC_PATH }}'

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: '${{ env.IAC_PATH }}'

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var location="${{ env.IAC_LOCATION }}" -var="sqlserver_administrator_login=${{ secrets.SQL_SERVER_ADMIN_USERNAME }}" -var="sqlserver_administrator_login_password=${{ secrets.SQL_SERVER_ADMIN_PASSWORD }}"
      working-directory: '${{ env.IAC_PATH }}'

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -var location="${{ env.IAC_LOCATION }}" -var sqlserver_administrator_login="${{ secrets.SQL_SERVER_ADMIN_USERNAME }}" -var sqlserver_administrator_login_password="${{ secrets.SQL_SERVER_ADMIN_PASSWORD }}"
      working-directory: '${{ env.IAC_PATH }}'
      
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2.1.0
      
    # Run dotnet build and publish
    - name: dotnet build and publish
      run: |
          dotnet restore
          dotnet build -c Release
          dotnet publish -c Release -o '${{ env.API_PATH }}/out' 
      working-directory: '${{ env.API_PATH }}'
          
    - uses: Azure/login@v1
      with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
          
      # Deploy to Azure Web apps
    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
          app-name: '${{ env.WEBAPP_NAME }}' # Replace with your app name          
          package: '${{ env.API_PATH }}/out'
      
    
