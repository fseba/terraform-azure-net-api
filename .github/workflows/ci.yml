name: 'Continuous Deployment'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCOUNT_KEY }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      IAC_PATH: 'Infrastructure'
      IAC_LOCATION: 'Brazil South'
      IAC_RESOURCE_GROUP_NAME: 'demo-resource-group'      
      API_PROJECT_NAME: 'DemoAPIAzure'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    outputs:
        resource_name_suffix: ${{ steps.tfoutput.outputs.resource_name_suffix }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3      

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: '${{ env.IAC_PATH }}'

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: '${{ env.IAC_PATH }}'

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out tfplan -input=false
      working-directory: '${{ env.IAC_PATH }}'
      env:
        TF_VAR_resource_group_name: '${{ env.IAC_RESOURCE_GROUP_NAME }}'
        TF_VAR_location: '${{ env.IAC_LOCATION }}'
        TF_VAR_sqlserver_administrator_login: '${{ secrets.SQL_SERVER_ADMIN_USERNAME }}'
        TF_VAR_sqlserver_administrator_login_password: '${{ secrets.SQL_SERVER_ADMIN_PASSWORD }}'
        TF_VAR_webapp_project_name: '${{ env.API_PROJECT_NAME }}'

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: tfapply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -input=false tfplan        
      working-directory: '${{ env.IAC_PATH }}'
    
    # I had to use terraform-bin instead of terraform due to this issue:
    # https://github.com/hashicorp/setup-terraform/issues/20
    - name: Terraform Outputs
      id: tfoutput      
      run: echo "::set-output name=resource_name_suffix::$(terraform-bin output -raw resource_name_suffix)"
      working-directory: '${{ env.IAC_PATH }}'      

  dotnet:
    name: 'DotNet'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform
    env:
      IAC_WEBAPP_NAME: 'webapp${{ needs.terraform.outputs.resource_name_suffix }}'  # set this to your application's name      
      API_PATH: 'API'      # set this to the path to your web app project, defaults to the repository root
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3 

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2.1.0
      
    # Run dotnet build and publish
    - name: dotnet build and publish
      run: |
          dotnet restore
          dotnet build -c Release
          dotnet publish -c Release -o 'out' 
      working-directory: '${{ env.API_PATH }}'
          
    - uses: Azure/login@v1
      with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
          
      # Deploy to Azure Web apps
    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
          app-name: '${{ env.IAC_WEBAPP_NAME }}' # Replace with your app name          
          package: '${{ env.API_PATH }}/out'
  
  testing:
    name: 'Test APIs'
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform, dotnet]
    env:
      IAC_WEBAPP_PROTOCOL: 'https'
      IAC_WEBAPP_URL: 'webapp${{ needs.terraform.outputs.resource_name_suffix }}.azurewebsites.net'  # set this to your application's name      
      TESTING_PATH: 'Testing'      # set this to the path to your web app project, defaults to the repository root
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3 
      
    - name: Update postman environment          
      uses: cschleiden/replace-tokens@v1.1
      with:        
        tokenPrefix: '__'         
        tokenSuffix: '__'         
        files: '["${{ env.TESTING_PATH }}/environment.postman_environment"]'
    
    - name: Setup Node.js environment
      uses: actions/setup-node@v3.4.1      
    
    # Run dotnet build and publish
    - name: newman install
      run:  npm install -g newman
      
    - name: newman run tests
      run:  newman run collection.postman_collection -e environment.postman_environment --reporters cli          
      working-directory: '${{ env.TESTING_PATH }}'     
    
