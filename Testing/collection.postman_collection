{
	"info": {
		"_postman_id": "c55e2247-4ac4-4f17-a8d5-bc7d416b9de2",
		"name": "01 - Demo API Azure",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "122304"
	},
	"item": [
		{
			"name": "Categories",
			"item": [
				{
					"name": "Add Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.has('test') && pm.environment.get('test') == 1) {\r",
									"    pm.test(\"New category created\", () => {\r",
									"        pm.response.to.have.status(201);\r",
									"\r",
									"        // Validate response to have a body\r",
									"        pm.response.to.have.jsonBody();\r",
									"        const responseCategory = pm.response.json();\r",
									"\r",
									"        // Validate response body to have a property named 'toDoId'\r",
									"        // with the ID of the new Tarea\r",
									"        pm.expect(responseCategory).to.have.property('categoryId').not.to.equal(undefined);\r",
									"        const { categoryId, name, description, weight } = responseCategory;\r",
									"            \r",
									"        // Validate response body to have the same values sent in the request body        \r",
									"        pm.expect( name ).to.eq( pm.request.body.raw.name );\r",
									"        pm.expect( description ).to.eq( pm.request.body.raw.description );\r",
									"        pm.expect( weight ).to.eq( pm.request.body.raw.weight );    \r",
									"\r",
									"        // Validate response to have a header named 'location'\r",
									"        pm.response.to.have.header('location');\r",
									"\r",
									"        // Validate response header 'lcoation' to include 'categoryId'\r",
									"        pm.expect(pm.response.headers.get('location')).to.contain(categoryId);\r",
									"\r",
									"        // If all the tests pass, store 'category' in a temporal variable\r",
									"        pm.variables.set('category', responseCategory);\r",
									"\r",
									"        // Set the next endpoint to test: 'Get Category by Id'\r",
									"        postman.setNextRequest('Get Category by Id');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.environment.has('test') && pm.environment.get('test') == 1) {\r",
									"    const body = {\r",
									"        name: 'Test',\r",
									"        description: \"Category to test\",\r",
									"        weight: 50\r",
									"    }\r",
									"\r",
									"    pm.request.body.raw = body;\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Things to learn\",\r\n    \"description\": \"All the things I want to learn in my life\",\r\n    \"weight\": 80\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/category",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {\r",
									"    let url = pm.request.url.toString();\r",
									"    const searchParam = 'category/';\r",
									"    const index = url.indexOf(searchParam);\r",
									"    pm.request.url = url.substr(0,  index + searchParam.length) + pm.variables.get('category').categoryId;    \r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {   \r",
									"    pm.test(\"Retrieve the category previously created\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"        \r",
									"        const category = pm.variables.get('category');\r",
									"\r",
									"        // Validate response to have a body\r",
									"        pm.response.to.have.jsonBody();    \r",
									"        const responseCategory = pm.response.json();\r",
									"        \r",
									"        // Validate response body to have a property named 'categoryId'\r",
									"        // with the ID of the new Category\r",
									"        pm.expect(responseCategory).to.have.property('categoryId').not.equal(undefined);\r",
									"        const { categoryId, name, description, weight } = responseCategory;   \r",
									"\r",
									"        // Validate response to have a body equals to the 'category'\r",
									"        // created with the Add Category API\r",
									"        pm.expect( categoryId ).to.eq( category.categoryId );\r",
									"        pm.expect( name ).to.eq( category.name );\r",
									"        pm.expect( description ).to.eq( category.description );\r",
									"        pm.expect( weight ).to.eq( category.weight );\r",
									"\r",
									"        // Set the next endpoint to test: 'Modify Category'\r",
									"        postman.setNextRequest('Modify Category');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/category/824d1bd5-9bc9-4ec5-aa11-6d6ebbcb5e67",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								"824d1bd5-9bc9-4ec5-aa11-6d6ebbcb5e67"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify Category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {   \r",
									"    let url = pm.request.url.toString();\r",
									"    const searchParam = 'category/';\r",
									"    const index = url.indexOf(searchParam);\r",
									"    pm.request.url = url.substr(0,  index + searchParam.length) + pm.variables.get('category').categoryId;    \r",
									"    \r",
									"    const body = {\r",
									"        name: 'Test 2',\r",
									"        description: \"Category to test 2\",\r",
									"        weight: 52\r",
									"    }\r",
									"    \r",
									"    pm.request.body.raw = body;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {\r",
									"    pm.test(\"Category updated successfully\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"\r",
									"        const sentCategory = { categoryId: pm.variables.get('category').categoryId, ...pm.request.body.raw };        \r",
									"\r",
									"        pm.sendRequest(`${pm.environment.get('protocol')}://${pm.environment.get('host')}/api/category/${sentCategory.categoryId}`, function (err, response) {\r",
									"            pm.expect(response.status).to.equal(\"OK\");        \r",
									"\r",
									"            const responseCategory = response.json();\r",
									"            const { categoryId, name, description, weight } = responseCategory;\r",
									"\r",
									"            // Validate that the category has been modified in the database \r",
									"            // and that we are retrieving the new values in the GET API\r",
									"            pm.expect( categoryId ).to.eq( sentCategory.categoryId );\r",
									"            pm.expect( name ).to.eq( sentCategory.name );        \r",
									"            pm.expect( description ).to.eq( sentCategory.description );\r",
									"            pm.expect( weight ).to.eq( sentCategory.weight );\r",
									"\r",
									"            // If all the tests pass, update 'category' variable with the modified values\r",
									"            pm.variables.set('category', responseCategory);\r",
									"        });\r",
									"        \r",
									"        // Set the next endpoint to test: 'Add ToDo'\r",
									"        postman.setNextRequest('Add ToDo');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Things to learn 2\",\r\n    \"description\": \"All the things I want to learn in my life 2\",\r\n    \"weight\": 82\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/category/f2041869-d1d1-4090-b677-4c5a1a43a733",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								"f2041869-d1d1-4090-b677-4c5a1a43a733"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {   \r",
									"    let url = pm.request.url.toString();\r",
									"    const searchParam = 'category/';\r",
									"    const index = url.indexOf(searchParam);\r",
									"    pm.request.url = url.substr(0,  index + searchParam.length) + pm.variables.get('category').categoryId;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {\r",
									"    pm.test(\"Category deleted successfully\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"        const { categoryId } = pm.variables.get('category');\r",
									"\r",
									"        pm.sendRequest(`${pm.environment.get('protocol')}://${pm.environment.get('host')}/api/category/${ categoryId }`, function (err, response) {\r",
									"            pm.expect(response.status).to.equal(\"Not Found\");\r",
									"\r",
									"            // If all the tests pass, update 'category' variable\r",
									"            pm.variables.unset('category');\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/category/8f2877a3-40a1-44fa-9b7f-540e026e7854",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category",
								"8f2877a3-40a1-44fa-9b7f-540e026e7854"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/category",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"category"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ToDos",
			"item": [
				{
					"name": "Add ToDo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {\r",
									"    pm.test(\"New toDo created\", () => {\r",
									"        pm.response.to.have.status(201);\r",
									"\r",
									"        // Validate response to have a body\r",
									"        pm.response.to.have.jsonBody();\r",
									"        const responseToDo = pm.response.json();\r",
									"\r",
									"        // Validate response body to have a property named 'toDoId'\r",
									"        // with the ID of the new Tarea\r",
									"        pm.expect(responseToDo).to.have.property('toDoId').not.to.equal(undefined);\r",
									"        const { toDoId, categoryId, title, description, priority } = responseToDo;\r",
									"            \r",
									"        // Validate response body to have the same values sent in the request body    \r",
									"        pm.expect( categoryId ).to.eq( pm.request.body.raw.categoryId );\r",
									"        pm.expect( title ).to.eq( pm.request.body.raw.title );\r",
									"        pm.expect( description ).to.eq( pm.request.body.raw.description );\r",
									"        pm.expect( priority ).to.eq( pm.request.body.raw.priority );    \r",
									"\r",
									"        // Validate response to have a header named 'location'\r",
									"        pm.response.to.have.header('location');\r",
									"\r",
									"        // Validate response header 'lcoation' to include 'toDoId'\r",
									"        pm.expect(pm.response.headers.get('location')).to.contain(toDoId);\r",
									"\r",
									"        // If all the tests pass, store 'toDo' in a temporal variable\r",
									"        pm.variables.set('toDo', responseToDo);\r",
									"\r",
									"        // Set the next endpoint to test: 'Get ToDo by Id'\r",
									"        postman.setNextRequest('Get ToDo by Id');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has('category')) {    \r",
									"    const body = {\r",
									"        categoryId: pm.variables.get('category').categoryId,\r",
									"        title: \"Test\",\r",
									"        description: \"Test ToDo\",\r",
									"        priority: 2\r",
									"    }\r",
									"\r",
									"    pm.request.body.raw = body;\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryId\": \"7c2196e4-9d06-4574-a212-d4bdef0a4bfb\",\r\n    \"title\": \"Visit my granny\",\r\n    \"description\": \"My granny needs help with her house\",\r\n    \"priority\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/toDo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"toDo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ToDo by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has('toDo')) {\r",
									"    let url = pm.request.url.toString();\r",
									"    const searchParam = 'toDo/';\r",
									"    const index = url.indexOf(searchParam);\r",
									"    pm.request.url = url.substr(0,  index + searchParam.length) + pm.variables.get('toDo').toDoId;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.has('toDo')) {\r",
									"    pm.test(\"Retrieve the toDo previously created\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"        \r",
									"        const toDo = pm.variables.get('toDo');\r",
									"\r",
									"        // Validate response to have a body\r",
									"        pm.response.to.have.jsonBody();    \r",
									"        const responseToDo = pm.response.json();\r",
									"        \r",
									"        // Validate response body to have a property named 'toDoId'\r",
									"        // with the ID of the new ToDo\r",
									"        pm.expect(responseToDo).to.have.property('toDoId').not.equal(undefined);\r",
									"        const { toDoId, categoryId, title, description, priority } = responseToDo;   \r",
									"\r",
									"        // Validate response to have a body equals to the 'category'\r",
									"        // created with the Add ToDo API\r",
									"        pm.expect( toDoId ).to.eq( toDo.toDoId );\r",
									"        pm.expect( categoryId ).to.eq( toDo.categoryId );\r",
									"        pm.expect( title ).to.eq( toDo.title );\r",
									"        pm.expect( description ).to.eq( toDo.description );\r",
									"        pm.expect( priority ).to.eq( toDo.priority );\r",
									"\r",
									"        // Set the next endpoint to test: 'Modify ToDo'\r",
									"        postman.setNextRequest('Modify ToDo');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/toDo/f91144d4-0137-429a-8d24-abe92aa5c600",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"toDo",
								"f91144d4-0137-429a-8d24-abe92aa5c600"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify ToDo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has('toDo')) {   \r",
									"    let url = pm.request.url.toString();\r",
									"    const searchParam = 'toDo/';\r",
									"    const index = url.indexOf(searchParam);\r",
									"    pm.request.url = url.substr(0,  index + searchParam.length) + pm.variables.get('toDo').toDoId;\r",
									"    \r",
									"    const body = {\r",
									"        categoryId: pm.variables.get('toDo').categoryId,\r",
									"        title: \"Test 2\",\r",
									"        description: \"Test ToDo 2\",\r",
									"        priority: 1\r",
									"    }\r",
									"    \r",
									"    pm.request.body.raw = body;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.has('toDo')) {\r",
									"    pm.test(\"ToDo updated successfully\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"\r",
									"        const sentToDo = { toDoId: pm.variables.get('toDo').toDoId, ...pm.request.body.raw };    \r",
									"\r",
									"        pm.sendRequest(`${pm.environment.get('protocol')}://${pm.environment.get('host')}/api/toDo/${sentToDo.toDoId}`, function (err, response) {\r",
									"            pm.expect(response.status).to.equal(\"OK\");        \r",
									"\r",
									"            const responseToDo = response.json();\r",
									"            const { toDoId, categoryId, title, description, priority } = responseToDo;\r",
									"\r",
									"            // Validate that the toDo has been modified in the database \r",
									"            // and that we are retrieving the new values in the GET API\r",
									"            pm.expect( toDoId ).to.eq( sentToDo.toDoId );\r",
									"            pm.expect( categoryId ).to.eq( sentToDo.categoryId );\r",
									"            pm.expect( title ).to.eq( sentToDo.title );\r",
									"            pm.expect( description ).to.eq( sentToDo.description );\r",
									"            pm.expect( priority ).to.eq( sentToDo.priority );        \r",
									"\r",
									"            // If all the tests pass, update 'toDo' variable with the modified values\r",
									"            pm.variables.set('toDo', responseToDo);\r",
									"        });\r",
									"        \r",
									"        // Set the next endpoint to test: 'Add ToDo'\r",
									"        postman.setNextRequest('Delete ToDo');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryId\": \"7c2196e4-9d06-4574-a212-d4bdef0a4bfc\",\r\n    \"title\": \"Visit my granny 2\",\r\n    \"description\": \"My granny needs help with her house 2\",\r\n    \"priority\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/toDo/e2d45cc2-bf86-45ec-8466-421ad930d222",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"toDo",
								"e2d45cc2-bf86-45ec-8466-421ad930d222"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete ToDo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(pm.variables.has('toDo')) {   \r",
									"    let url = pm.request.url.toString();\r",
									"    const searchParam = 'toDo/';\r",
									"    const index = url.indexOf(searchParam);\r",
									"    pm.request.url = url.substr(0,  index + searchParam.length) + pm.variables.get('toDo').toDoId;\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.variables.has('toDo')) {\r",
									"    pm.test(\"ToDo deleted successfully\", () => {\r",
									"        pm.response.to.have.status(200);\r",
									"        const { toDoId } = pm.variables.get('toDo');\r",
									"\r",
									"        pm.sendRequest(`${pm.environment.get('protocol')}://${pm.environment.get('host')}/api/toDo/${ toDoId }`, function (err, response) {\r",
									"            pm.expect(response.status).to.equal(\"Not Found\");\r",
									"\r",
									"            // If all the tests pass, update 'toDo' variable\r",
									"            pm.variables.unset('toDo');\r",
									"        });\r",
									"\r",
									"        postman.setNextRequest('Delete Category');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/toDo/f2ca0bec-88ea-42f2-99db-fc1d36e84f01",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"toDo",
								"f2ca0bec-88ea-42f2-99db-fc1d36e84f01"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All ToDos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/toDo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"toDo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check API Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/health",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"health"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}